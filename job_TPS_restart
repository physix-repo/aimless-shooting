#!/bin/bash -l


#/////////////////////////////////////////////////
# Settings of the cluster
#/////////////////////////////////////////////////

#========================================
#SBATCH --job-name=jobNameInQueue
#SBATCH --time=19:00:00
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=4
#SBATCH --hint=nomultithread
#SBATCH --cpus-per-task=10
#SBATCH --hint=nomultithread
#SBATCH --output=GMX_GenMD.o%j
#SBATCH --error=GMX_GenMD.e%j


#/////////////////////////////////////////////////
# Settings of the Aimless shooting
#/////////////////////////////////////////////////
 
#==============================================
# set simulations parameters externally throug launchJob.sh
delta_t=deltaValue
maxLength=maxLengthValue
numFrames=$((maxLength / delta_t))
halfFrames=$((numFrames / 2))
confDir=confDirName
echo "Maximum trajectory length = $maxLength (ps), dt = $delta_t (ps), #frames = $numFrames"

#================================================
# function to compute a trajectory status, this is here that you will to define the two
# state basin. Here I just use one variable, if you have for a 2D basin definition
# with your variable in the second and third column you can use for instance
#    'if ($2 < some_value && $3 < some_value) { print "name_of_my_state"; exit; }'
# Also 
trajectoryStatus() {
  local status=""$(awk '
    {
      if (NR > 5) {
        if ($5 > 19) { print "Liquid"; exit; } 
        if ($5 < 12) { print "Ice"; exit; }
      }
    }' $1)
  echo $status
}


#/////////////////////////////////////////////////
# Some utility function definition
#/////////////////////////////////////////////////

#================================================
# function to compute status of the run
computeStatus() {
  local cvName=colvar/cv_$1
  local FwdStatus="$(trajectoryStatus ${cvName}_fw)"
  local BwdStatus="$(trajectoryStatus ${cvName}_bw)"
  local Status=$( echo "r${FwdStatus}${BwdStatus}")
  echo $Status
}

#================================================
# function to compute connected status of a traj
# we had "r" to the status name to avoid error when traj doesn't connect a basin
isConnected() {
  local cvName=colvar/cv_$1
  local Status="r$(trajectoryStatus $cvName)"
  if [ "$Status" = "rLiquid" ] || [ "$Status" = "rIce" ] ; then
    connected="true"
  else
    connected="false"
  fi
  echo $connected
}

#================================================
# function to draw the shooting point
drawShootingPoint() {
  local p1="$(echo | awk 'BEGIN {"date +%N"|getline rseed; srand(rseed); } { print (rand() > 0.5); }')"
  if [ $p1 -eq 0 ] ; then
    local frame=$(( $1 - 1 ))
  else
    local frame=$(( $1 + 1 ))
  fi
  # this two line are to avoid absurd number, but in theory these case should never occur...
  if [ $frame -lt 0 ] ; then
    local frame=1
  fi
  if [ $frame -gt $2 ] ; then
    local frame=$(awk "BEGIN { print ($2 - 1); }")
  fi
  echo $frame
}


#/////////////////////////////////////////////////
# Start of the Aimless Shooting
#/////////////////////////////////////////////////

#==============================================
# read from file the last frame and run computed
lastFrame=$(tail -1 currentFrame.txt)
lastRun=$(tail -1 currentRun.txt)

# launch i-th step of aimless TPS
i=$(( $lastRun + 1 ))
echo ""
echo "Starting date: " | date
echo ""

begin=`date +%s.%N`

  #==============================================
  # compute random step of the aimless TPS
  stpFrame=$(drawShootingPoint $lastFrame $numFrame)

  # configure i-th directory
  mkdir -p ${i}
  mkdir -p gro

  #==============================================
  # define gromacs and plumed and relevant directories
  scratch=/gpfsscratch/rech/bgo/uei49vg
  topo=$scratch/nucleation/tip4pIce.top
  exePLMD=$scratch/plumed2/build/bin/plumed
  source  $scratch/plumed2/sourceme.sh
  mkdir -p dat
  mkdir -p colvar
  sed s/cv_name_holder/cv_${i}_fw/g tps.dat > dat/tps_fw.dat
  sed s/cv_name_holder/cv_${i}_bw/g tps.dat > dat/tps_bw.dat

  #==============================================
  # generate two trajectories with invert velocities
  tprFwd=${i}/stp${i}_fw
  tprBwd=${i}/stp${i}_bw
  sed s/1312/12348${i}${stpFrame}/g tps.mdp > tps_${i}.mdp
  module purge
  module load gromacs/2018.7 gcc/8.2.0 
  exeGRMP1=gmx
  $exeGRMP1 grompp -f tps_${i}.mdp -c $confDir/${stpFrame}.pdb -p $topo -o ${tprFwd}_0.tpr -maxwarn 1
  module purge
  module load intel-mpi cmake intel-compilers
  exeGRMP2=$scratch/gromacs-2018.3/build/install_bwd/bin/gmx_bwd
  $exeGRMP2 grompp -f tps_${i}.mdp -c $confDir/${stpFrame}.pdb -p $topo -o ${tprBwd}_0.tpr -maxwarn 1
 

  #/////////////////////////////////////////////////
  # Main loop where we propagate backward and forward traj by step of 5 ns
  # If one traj reach a basin we stop to update it. If two traj reach a basin we stop the run
  #/////////////////////////////////////////////////

  #==============================================
  # compute the two trajectories with 5ns step
  count=0
  length=0
  accepted="false"
  rejected="false"
  connectedBwd="false"
  connectedFwd="false"
  halfLength=$(( maxLength / 2 ))
  while [ $length -lt $halfLength ] && [ "$accepted" = "false" ] && [ "$rejected" = "false" ];
  do
    #===========================================
    # extend simulation by 5ns every step
    if [ $count -gt 0 ] ; then
      previous=$(awk "BEGIN {print ($count - 1);}")
      module purge
      module load intel-mpi cmake intel-compilers
      exeGRMP1=gmx
      exeGRMP2=$scratch/gromacs-2018.3/build/install_bwd/bin/gmx_bwd
      $exeGRMP2 convert-tpr -s ${tprFwd}_${previous}.tpr -extend 5000 -o ${tprFwd}_${count}.tpr
      $exeGRMP2 convert-tpr -s ${tprBwd}_${previous}.tpr -extend 5000 -o ${tprBwd}_${count}.tpr
    fi
  
    #==============================================
    # compute the two run, except if one of them have already reached one of the basin. 
    # remove the if statement if you want to have backward and forward traj of same length
    module purge
    module load gromacs/2018.7-mpi-cuda gcc/8.2.0
    exeGRMX=gmx_mpi
    if [ "$connectedFwd" = "false" ] ; then
      srun $exeGRMX mdrun -s ${tprFwd}_${count}.tpr -cpi ${tprFwd}.cpt -deffnm ${tprFwd} -ntomp $SLURM_CPUS_PER_TASK
    fi
    if [ "$connectedBwd" = "false" ] ; then
      srun $exeGRMX mdrun -s ${tprBwd}_${count}.tpr -cpi ${tprBwd}.cpt -deffnm ${tprBwd} -ntomp $SLURM_CPUS_PER_TASK
    fi

    #==============================================
    # compute collective variable for the two run, except if one of them have already reached one of 
    # the basin. Remove if statement if you want to have backward and forward traj of same length
    module purge
    module load intel-mpi cmake intel-compilers
    if [ "$connectedFwd" = "false" ] ; then
      $exePLMD driver --mf_xtc ${tprFwd}.xtc --timestep 0.002 --trajectory-stride 25000 --plumed dat/tps_fw.dat
    fi
    if [ "$connectedBwd" = "false" ] ; then
      $exePLMD driver --mf_xtc ${tprBwd}.xtc --timestep 0.002 --trajectory-stride 25000 --plumed dat/tps_bw.dat
    fi
 
    #==============================================
    # check if we have a transition (run connect Liquid and Ice) or if the two
    # traj reached the same basin
    mkdir -p traj
    Status="$(computeStatus $i)"
    connectedBwd="$(isConnected ${i}_bw)"
    connectedFwd="$(isConnected ${i}_fw)"
    echo "Result of the shooting: $Status"
    if [ "$Status" = "rLiquidIce" ] || [ "$Status" = "rIceLiquid" ] ; then
      accepted="true"
    fi 
    if [ "$Status" = "rLiquidLiquid" ] || [ "$Status" = "rIceIce" ] ; then
      rejected="true"
    fi

    #==============================================
    # update loop
    if [ "$accepted" = "false" ] && [ "$rejected" = false ] ; then
      count=$(awk "BEGIN {print ($count + 1);}")
    fi
    length=$(awk "BEGIN {print 5000*($count + 1 );}")
    # print status of the current update
    echo "$count ($length): $accepted. Connection status : $connectedBwd, $connectedFwd ($Status)"
  done
  rm colvar/bck.*
  echo "The shooting connect A and B: $accepted"


  #/////////////////////////////////////////////////
  # Print relevant information after the end of the run. If path connect the two states,
  # we save its configurations, otherwise we just print status of the run and launch next one
  #/////////////////////////////////////////////////
  
  #==============================================
  # then generate frames from the new trajectory
  # if backward and forward connect to Ice or Liquid
  if [ "$accepted" = "true" ] ; then
    # save transition trajectory in separate folder
    cp ${i}/stp${i}_*.xtc traj/
    cp ${i}/stp${i}_*.edr traj/
    cp colvar/cv_${i}_* traj/

    # extract new configuration from trajectory
    module purge
    module load intel-mpi cmake intel-compilers
    frames=$(awk "BEGIN {for (i = 0; i < $halfFrames; i += 1) print i;}")
    for frame in $frames
    do
      conf=$(awk "BEGIN {print int (($frame + 1) * $delta_t)}")
      fwd=$(awk "BEGIN {print $halfFrames - $frame}")
      bwd=$(awk "BEGIN {print $halfFrames + $frame + 1}")
      echo "frame : $fwd + $bwd"
      echo "2" | $exeGRMP2 trjconv -f ${tprFwd}.xtc -s ${tprFwd}_${count}.tpr \
                 -o $confDir/${fwd}.pdb -b $conf -e $conf
      echo "2" | $exeGRMP2 trjconv -f ${tprBwd}.xtc -s ${tprBwd}_${count}.tpr \
                 -o $confDir/${bwd}.pdb -b $conf -e $conf
    done
    rm -f $confDir/\#*
  fi
  
  #==============================================
  # keep track of the current frame and run for next step
  # if run was rejected we keep the hold one as the shooting one
  if [ "$accepted" = "true" ] ; then
    echo $stpFrame >> currentFrame.txt
    echo $i >> lastRunAccepted.txt
  else
    echo $lastFrame >> currentFrame.txt
  fi
  echo $i >> currentRun.txt

  #==============================================
  # save status of the run for extra data (number is there for easier plot)
  printStatus="XX        $i      1"
  if [ "$Status" = "rLiquidIce" ] ; then
    printStatus="LiqIce    $i      7"
  elif [ "$Status" = "rIceLiquid" ] ; then
    printStatus="IceLiq    $i      6"
  elif [ "$Status" = "rLiquidLiquid" ] ; then
    printStatus="LiqLiq    $i      5"
  elif [ "$Status" = "rIceIce" ] ; then
    printStatus="IceIce    $i      4"
  elif [ "$Status" = "rIce" ] ; then
    printStatus="IceX      $i      3"
  elif [ "$Status" = "rLiq" ] ; then
    printStatus="LiqX      $i      2"
  fi
  echo "$printStatus   $accepted    $stpFrame   $length" >> status_shooting_TPS.txt

  echo "-------------------------- NEW RUN -----------------------------"

  
#/////////////////////////////////////////////////
# Launch next step 
#/////////////////////////////////////////////////

#==============================================
# launch next step if we are not in a loop of failure
end=`date +%s.%N`
runtime=$(awk "BEGIN {print int($end - $begin);}")
if [ $runtime -gt 120 ] ; then
  sbatch job_TPS_restart
fi

echo ""
echo "Ending date : " | date
echo ""
